name: CI for Feature Branches

on:
  push:
    branches:
      - 'feature/*'

jobs:
  feature-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set pipelines variables
        uses: ./.github/actions/vars-pipe

      - name: Check if branch is behind develop or main
        run: |
          git fetch --all --prune
          git fetch origin develop
          git fetch origin main
          behind_develop=$(git rev-list --left-only --count origin/develop...HEAD)
          behind_main=$(git rev-list --left-only --count origin/main...HEAD)
          if [ "$behind_develop" -gt 0 ]; then
            echo "Branch is behind develop. Please update your branch.. Total commits behind develop: $behind_develop"
            exit 1
          fi
          if [ "$behind_main" -gt 0 ]; then
            echo "Branch is behind main. Please update your branch.. Total commits behind main: $behind_main"
            exit 1
          fi
          echo "Branch is up to date with develop and main."

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run lint checks
        working-directory: ./app
        run: |
          set +e
          mvn checkstyle:check
          status=$?
          if [ "$status" -ne 0 ]; then
            echo "Lint errors found."
            if [ "${BYPASS_LINT}" = "true" ]; then
              echo "Bypass lint is enabled. Continuing pipeline despite lint errors."
              exit 0
            else
              echo "Pipeline interrupted due to lint errors."
              exit 1
            fi
          fi
        env:
          BYPASS_LINT: ${{ env.BYPASS_LINT }}
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: 'low'
          head-ref: '${{ github.ref_name }}'
          base-ref: 'develop'
          comment-summary-in-pr: 'true'
          show-openssf-scorecard: 'true'
          warn-only: 'false'
      
      - name: Run unit tests
        working-directory: ./app
        run: mvn test

      - name: Build application
        working-directory: ./app
        run: mvn package

      - name: Get commit messages
        id: commits
        run: |
          git fetch origin develop
          COMMITS=$(git log --pretty=format:"* %s" origin/develop..${{ github.ref_name }})
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Pull Request to develop
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: develop
          branch: ${{ github.ref_name }}
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          title: "PR develop << ${{ github.ref_name }}"
          body: ${{ env.COMMITS }}
          labels: |
            'feature'
            'automated pr'
