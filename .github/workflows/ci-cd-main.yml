name: CI/CD Pipeline for Main Branch

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set pipelines variables
        uses: ./.github/actions/vars-pipe

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Lint Checks
        working-directory: ./app
        run: |
          set +e
          mvn checkstyle:check
          status=$?
          if [ "$status" -ne 0 ]; then
            echo "Lint errors found."
            if [ "${BYPASS_LINT}" = "true" ]; then
              echo "Bypass lint is enabled. Continuing pipeline despite lint errors."
              exit 0
            else
              echo "Pipeline interrupted due to lint errors."
              exit 1
            fi
          fi
        env:
          BYPASS_LINT: ${{ env.BYPASS_LINT }}

      - name: Run Unit Tests
        working-directory: ./app
        run: mvn test

      - name: Build Application
        working-directory: ./app
        run: mvn package

      - name: Set Docker image variables
        uses: ./.github/actions/vars-docker

      - name: Set Docker image tag
        run: |
          echo "IMAGE_TAG=v${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=latest" >> $GITHUB_ENV

      - name: Set Docker image name
        run: |
          echo "IMAGE_FULL_NAME_LATEST=${{ env.DOCKER_ACCOUNT }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST}}" >> $GITHUB_ENV
          echo "IMAGE_FULL_NAME_TAG=${{ env.DOCKER_ACCOUNT }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

      - name: Push versioned Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_FULL_NAME_TAG }}
          docker push ${{ env.IMAGE_FULL_NAME_TAG }}

      - name: Tag as latest and push
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_FULL_NAME_LATEST }}
          docker push ${{ env.IMAGE_FULL_NAME_LATEST }}

      - name: Tag as latest and push
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_FULL_NAME_LATEST }}
          docker push ${{ env.IMAGE_FULL_NAME_LATEST }}

      - name: Repository Docker image information
        id: docker_info
        run: |
          echo "Docker image '${{ env.IMAGE_TAG_LATEST}}' and '${{ env.IMAGE_TAG }}' pushed to: ${{env.URL_DOCKER_HUB_REPO}}"

      - name: Deploy to Production
        run: "echo Deploying to Production environment"